name: Run deploy

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'client/**'
      - 'cms/**'
      - '.github/workflows/*'

env:
  PROJECT_NAME: 'esa-gda-comms'
  IMAGE_REGISTRY: 'registry.digitalocean.com/esa-gda-comms'

jobs:
  build_client_image:
    name: Build Client image and push to DO Container Registry
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Copy env variables to docker
        env:
          ENVIRONMENT: ${{ steps.extract_branch.outputs.branch == 'main' && 'PROD' || 'STAGING' }}
        run: |
          echo "${{ secrets[format('{0}_CLIENT_ENV_FILE', env.ENVIRONMENT)] }}" > client/.env.local

      - name: Build and tag Client image
        env:
          IMAGE_NAME: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}-client
        run: |
          docker build -f client/Dockerfile.prod -t $IMAGE_REGISTRY/$IMAGE_NAME:$GITHUB_SHA .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        env:
          IMAGE_NAME: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}-client
        run: docker push $IMAGE_REGISTRY/$IMAGE_NAME:$GITHUB_SHA

      - name: Remove old images from Container Registry
        uses: martintomas/docr-image-remove@v1
        with:
          image_repository: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}-client
          buffer_size: 5

  build_cms_image:
    name: Build CMS image and push to DO Container Registry
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Copy env variables to docker
        env:
          ENVIRONMENT: ${{ steps.extract_branch.outputs.branch == 'main' && 'PROD' || 'STAGING' }}
        run: |
          echo "${{ secrets[format('{0}_CMS_ENV_FILE', env.ENVIRONMENT)] }}" > cms/.env

      - name: Build and tag CMS image
        env:
          IMAGE_NAME: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}-cms
        run: |
          docker build -f cms/Dockerfile.prod -t $IMAGE_REGISTRY/$IMAGE_NAME:$GITHUB_SHA .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        env:
          IMAGE_NAME: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}-cms
        run: docker push $IMAGE_REGISTRY/$IMAGE_NAME:$GITHUB_SHA

      - name: Remove old images from Container Registry
        uses: martintomas/docr-image-remove@v1
        with:
          image_repository: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}-cms
          buffer_size: 5

  deploy:
    name: Deploy Client and CMS to DO App Platform
    needs: [build_client_image, build_cms_image]
    runs-on: ubuntu-22.04

    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      # Calcula nombres de componentes y crea las ENV que espera la v2:
      # IMAGE_TAG_<NOMBRE_COMPONENTE_EN_DO_EN_MAYÚSCULAS_CON_GUIONES_A_GUIONES_BAJOS>
      - name: Set App Platform image tags (computed)
        env:
          DEPLOY_ENV: ${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}
        run: |
          CLIENT_NAME: `${{ env.PROJECT_NAME }}-${DEPLOY_ENV}-client`
          CMS_NAME: `${{ env.PROJECT_NAME }}-${DEPLOY_ENV}-cms`

          CLIENT_ENV_NAME=$(echo "$CLIENT_NAME" | tr '[:lower:]-' '[:upper:]_')
          CMS_ENV_NAME=$(echo "$CMS_NAME" | tr '[:lower:]-' '[:upper:]_')

          # Exportar las variables que leerá el action v2
          echo "IMAGE_TAG_${CLIENT_ENV_NAME}=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "IMAGE_TAG_${CMS_ENV_NAME}=${GITHUB_SHA}" >> $GITHUB_ENV

          echo "Usando componentes:"
          echo "  $CLIENT_NAME  -> IMAGE_TAG_${CLIENT_ENV_NAME}"
          echo "  $CMS_NAME     -> IMAGE_TAG_${CMS_ENV_NAME}"

      - name: DigitalOcean App Platform deployment (v2)
        uses: digitalocean/app_action/deploy@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          app_name: ${{ env.PROJECT_NAME }}-${{ steps.extract_branch.outputs.branch == 'main' && 'production' || 'staging' }}
          print_build_logs: 'true'
          print_deploy_logs: 'true'
