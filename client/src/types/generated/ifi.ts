/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  Error,
  GetIfisIdParams,
  GetIfisParams,
  IfiListResponse,
  IfiRequest,
  IfiResponse,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getIfis = (params?: GetIfisParams, signal?: AbortSignal) => {
  return API<IfiListResponse>({ url: `/ifis`, method: 'get', params, signal });
};

export const getGetIfisQueryKey = (params?: GetIfisParams) => {
  return [`/ifis`, ...(params ? [params] : [])] as const;
};

export const getGetIfisInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getIfis>>,
  TError = ErrorType<Error>
>(
  params?: GetIfisParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIfis>>, TError, TData> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIfisQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIfis>>> = ({ signal, pageParam }) =>
    getIfis({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getIfis>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetIfisInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getIfis>>>;
export type GetIfisInfiniteQueryError = ErrorType<Error>;

export const useGetIfisInfinite = <
  TData = Awaited<ReturnType<typeof getIfis>>,
  TError = ErrorType<Error>
>(
  params?: GetIfisParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIfis>>, TError, TData> }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIfisInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetIfisQueryOptions = <
  TData = Awaited<ReturnType<typeof getIfis>>,
  TError = ErrorType<Error>
>(
  params?: GetIfisParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getIfis>>, TError, TData> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIfisQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIfis>>> = ({ signal }) =>
    getIfis(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getIfis>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetIfisQueryResult = NonNullable<Awaited<ReturnType<typeof getIfis>>>;
export type GetIfisQueryError = ErrorType<Error>;

export const useGetIfis = <TData = Awaited<ReturnType<typeof getIfis>>, TError = ErrorType<Error>>(
  params?: GetIfisParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getIfis>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIfisQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postIfis = (ifiRequest: IfiRequest) => {
  return API<IfiResponse>({
    url: `/ifis`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: ifiRequest,
  });
};

export const getPostIfisMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIfis>>,
    TError,
    { data: IfiRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postIfis>>,
  TError,
  { data: IfiRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postIfis>>, { data: IfiRequest }> = (
    props
  ) => {
    const { data } = props ?? {};

    return postIfis(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostIfisMutationResult = NonNullable<Awaited<ReturnType<typeof postIfis>>>;
export type PostIfisMutationBody = IfiRequest;
export type PostIfisMutationError = ErrorType<Error>;

export const usePostIfis = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIfis>>,
    TError,
    { data: IfiRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostIfisMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getIfisId = (id: number, params?: GetIfisIdParams, signal?: AbortSignal) => {
  return API<IfiResponse>({ url: `/ifis/${id}`, method: 'get', params, signal });
};

export const getGetIfisIdQueryKey = (id: number, params?: GetIfisIdParams) => {
  return [`/ifis/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetIfisIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getIfisId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetIfisIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getIfisId>>, TError, TData> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIfisIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIfisId>>> = ({ signal }) =>
    getIfisId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getIfisId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetIfisIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIfisId>>>;
export type GetIfisIdQueryError = ErrorType<Error>;

export const useGetIfisId = <
  TData = Awaited<ReturnType<typeof getIfisId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetIfisIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getIfisId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIfisIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putIfisId = (id: number, ifiRequest: IfiRequest) => {
  return API<IfiResponse>({
    url: `/ifis/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: ifiRequest,
  });
};

export const getPutIfisIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIfisId>>,
    TError,
    { id: number; data: IfiRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putIfisId>>,
  TError,
  { id: number; data: IfiRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putIfisId>>,
    { id: number; data: IfiRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putIfisId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutIfisIdMutationResult = NonNullable<Awaited<ReturnType<typeof putIfisId>>>;
export type PutIfisIdMutationBody = IfiRequest;
export type PutIfisIdMutationError = ErrorType<Error>;

export const usePutIfisId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIfisId>>,
    TError,
    { id: number; data: IfiRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutIfisIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteIfisId = (id: number) => {
  return API<number>({ url: `/ifis/${id}`, method: 'delete' });
};

export const getDeleteIfisIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIfisId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteIfisId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIfisId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteIfisId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteIfisIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIfisId>>>;

export type DeleteIfisIdMutationError = ErrorType<Error>;

export const useDeleteIfisId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIfisId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteIfisIdMutationOptions(options);

  return useMutation(mutationOptions);
};
