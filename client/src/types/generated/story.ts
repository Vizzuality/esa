/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  StoryListResponse,
  Error,
  GetStoriesParams,
  StoryResponse,
  StoryRequest,
  GetStoriesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getStories = (params?: GetStoriesParams, signal?: AbortSignal) => {
  return API<StoryListResponse>({ url: `/stories`, method: 'get', params, signal });
};

export const getGetStoriesQueryKey = (params?: GetStoriesParams) =>
  [`/stories`, ...(params ? [params] : [])] as const;

export const getGetStoriesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getStories>>,
  TError = ErrorType<Error>
>(
  params?: GetStoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStories>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStories>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStories>>> = ({ signal, pageParam }) =>
    getStories({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetStoriesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStories>>>;
export type GetStoriesInfiniteQueryError = ErrorType<Error>;

export const useGetStoriesInfinite = <
  TData = Awaited<ReturnType<typeof getStories>>,
  TError = ErrorType<Error>
>(
  params?: GetStoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStories>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStoriesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetStoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getStories>>,
  TError = ErrorType<Error>
>(
  params?: GetStoriesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStories>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getStories>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStories>>> = ({ signal }) =>
    getStories(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetStoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getStories>>>;
export type GetStoriesQueryError = ErrorType<Error>;

export const useGetStories = <
  TData = Awaited<ReturnType<typeof getStories>>,
  TError = ErrorType<Error>
>(
  params?: GetStoriesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStories>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postStories = (storyRequest: StoryRequest) => {
  return API<StoryResponse>({
    url: `/stories`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: storyRequest,
  });
};

export const getPostStoriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postStories>>,
    TError,
    { data: StoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postStories>>,
  TError,
  { data: StoryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postStories>>,
    { data: StoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postStories(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostStoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postStories>>>;
export type PostStoriesMutationBody = StoryRequest;
export type PostStoriesMutationError = ErrorType<Error>;

export const usePostStories = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postStories>>,
    TError,
    { data: StoryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostStoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getStoriesId = (id: number, params?: GetStoriesIdParams, signal?: AbortSignal) => {
  return API<StoryResponse>({ url: `/stories/${id}`, method: 'get', params, signal });
};

export const getGetStoriesIdQueryKey = (id: number, params?: GetStoriesIdParams) =>
  [`/stories/${id}`, ...(params ? [params] : [])] as const;

export const getGetStoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getStoriesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetStoriesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStoriesId>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getStoriesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStoriesId>>> = ({ signal }) =>
    getStoriesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetStoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStoriesId>>>;
export type GetStoriesIdQueryError = ErrorType<Error>;

export const useGetStoriesId = <
  TData = Awaited<ReturnType<typeof getStoriesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetStoriesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStoriesId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStoriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putStoriesId = (id: number, storyRequest: StoryRequest) => {
  return API<StoryResponse>({
    url: `/stories/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: storyRequest,
  });
};

export const getPutStoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putStoriesId>>,
    TError,
    { id: number; data: StoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putStoriesId>>,
  TError,
  { id: number; data: StoryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putStoriesId>>,
    { id: number; data: StoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putStoriesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutStoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStoriesId>>>;
export type PutStoriesIdMutationBody = StoryRequest;
export type PutStoriesIdMutationError = ErrorType<Error>;

export const usePutStoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putStoriesId>>,
    TError,
    { id: number; data: StoryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutStoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteStoriesId = (id: number) => {
  return API<number>({ url: `/stories/${id}`, method: 'delete' });
};

export const getDeleteStoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteStoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteStoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteStoriesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteStoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteStoriesId>>
>;

export type DeleteStoriesIdMutationError = ErrorType<Error>;

export const useDeleteStoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteStoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
