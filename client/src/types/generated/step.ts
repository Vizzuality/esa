/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  StepListResponse,
  Error,
  GetStepsParams,
  StepResponse,
  StepRequest,
  GetStepsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getSteps = (params?: GetStepsParams, signal?: AbortSignal) => {
  return API<StepListResponse>({ url: `/steps`, method: 'get', params, signal });
};

export const getGetStepsQueryKey = (params?: GetStepsParams) =>
  [`/steps`, ...(params ? [params] : [])] as const;

export const getGetStepsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getSteps>>,
  TError = ErrorType<Error>
>(
  params?: GetStepsParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSteps>>, TError, TData> }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSteps>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStepsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSteps>>> = ({ signal, pageParam }) =>
    getSteps({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetStepsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSteps>>>;
export type GetStepsInfiniteQueryError = ErrorType<Error>;

export const useGetStepsInfinite = <
  TData = Awaited<ReturnType<typeof getSteps>>,
  TError = ErrorType<Error>
>(
  params?: GetStepsParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSteps>>, TError, TData> }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStepsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetStepsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSteps>>,
  TError = ErrorType<Error>
>(
  params?: GetStepsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSteps>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getSteps>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStepsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSteps>>> = ({ signal }) =>
    getSteps(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetStepsQueryResult = NonNullable<Awaited<ReturnType<typeof getSteps>>>;
export type GetStepsQueryError = ErrorType<Error>;

export const useGetSteps = <
  TData = Awaited<ReturnType<typeof getSteps>>,
  TError = ErrorType<Error>
>(
  params?: GetStepsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSteps>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStepsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postSteps = (stepRequest: StepRequest) => {
  return API<StepResponse>({
    url: `/steps`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: stepRequest,
  });
};

export const getPostStepsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSteps>>,
    TError,
    { data: StepRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSteps>>,
  TError,
  { data: StepRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSteps>>,
    { data: StepRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postSteps(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostStepsMutationResult = NonNullable<Awaited<ReturnType<typeof postSteps>>>;
export type PostStepsMutationBody = StepRequest;
export type PostStepsMutationError = ErrorType<Error>;

export const usePostSteps = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSteps>>,
    TError,
    { data: StepRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostStepsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getStepsId = (id: number, params?: GetStepsIdParams, signal?: AbortSignal) => {
  return API<StepResponse>({ url: `/steps/${id}`, method: 'get', params, signal });
};

export const getGetStepsIdQueryKey = (id: number, params?: GetStepsIdParams) =>
  [`/steps/${id}`, ...(params ? [params] : [])] as const;

export const getGetStepsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getStepsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetStepsIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStepsId>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getStepsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStepsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStepsId>>> = ({ signal }) =>
    getStepsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetStepsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStepsId>>>;
export type GetStepsIdQueryError = ErrorType<Error>;

export const useGetStepsId = <
  TData = Awaited<ReturnType<typeof getStepsId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetStepsIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStepsId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStepsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putStepsId = (id: number, stepRequest: StepRequest) => {
  return API<StepResponse>({
    url: `/steps/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: stepRequest,
  });
};

export const getPutStepsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putStepsId>>,
    TError,
    { id: number; data: StepRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putStepsId>>,
  TError,
  { id: number; data: StepRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putStepsId>>,
    { id: number; data: StepRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putStepsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutStepsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStepsId>>>;
export type PutStepsIdMutationBody = StepRequest;
export type PutStepsIdMutationError = ErrorType<Error>;

export const usePutStepsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putStepsId>>,
    TError,
    { id: number; data: StepRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutStepsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteStepsId = (id: number) => {
  return API<number>({ url: `/steps/${id}`, method: 'delete' });
};

export const getDeleteStepsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStepsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteStepsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStepsId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteStepsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteStepsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStepsId>>>;

export type DeleteStepsIdMutationError = ErrorType<Error>;

export const useDeleteStepsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStepsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteStepsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
