/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CategoryListResponse,
  Error,
  GetCategoriesParams,
  CategoryResponse,
  CategoryRequest,
  GetCategoriesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getCategories = (params?: GetCategoriesParams, signal?: AbortSignal) => {
  return API<CategoryListResponse>({ url: `/categories`, method: 'get', params, signal });
};

export const getGetCategoriesQueryKey = (params?: GetCategoriesParams) =>
  [`/categories`, ...(params ? [params] : [])] as const;

export const getGetCategoriesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<Error>
>(
  params?: GetCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({
    signal,
    pageParam,
  }) => getCategories({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetCategoriesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesInfiniteQueryError = ErrorType<Error>;

export const useGetCategoriesInfinite = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<Error>
>(
  params?: GetCategoriesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoriesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<Error>
>(
  params?: GetCategoriesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({ signal }) =>
    getCategories(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>;
export type GetCategoriesQueryError = ErrorType<Error>;

export const useGetCategories = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ErrorType<Error>
>(
  params?: GetCategoriesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCategories = (categoryRequest: CategoryRequest) => {
  return API<CategoryResponse>({
    url: `/categories`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: categoryRequest,
  });
};

export const getPostCategoriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCategories>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCategories>>,
  TError,
  { data: CategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCategories>>,
    { data: CategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCategories(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCategories>>>;
export type PostCategoriesMutationBody = CategoryRequest;
export type PostCategoriesMutationError = ErrorType<Error>;

export const usePostCategories = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCategories>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCategoriesId = (
  id: number,
  params?: GetCategoriesIdParams,
  signal?: AbortSignal
) => {
  return API<CategoryResponse>({ url: `/categories/${id}`, method: 'get', params, signal });
};

export const getGetCategoriesIdQueryKey = (id: number, params?: GetCategoriesIdParams) =>
  [`/categories/${id}`, ...(params ? [params] : [])] as const;

export const getGetCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetCategoriesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesId>>> = ({ signal }) =>
    getCategoriesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetCategoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesId>>>;
export type GetCategoriesIdQueryError = ErrorType<Error>;

export const useGetCategoriesId = <
  TData = Awaited<ReturnType<typeof getCategoriesId>>,
  TError = ErrorType<Error>
>(
  id: number,
  params?: GetCategoriesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCategoriesId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCategoriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCategoriesId = (id: number, categoryRequest: CategoryRequest) => {
  return API<CategoryResponse>({
    url: `/categories/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: categoryRequest,
  });
};

export const getPutCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCategoriesId>>,
    TError,
    { id: number; data: CategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCategoriesId>>,
  TError,
  { id: number; data: CategoryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCategoriesId>>,
    { id: number; data: CategoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCategoriesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCategoriesId>>
>;
export type PutCategoriesIdMutationBody = CategoryRequest;
export type PutCategoriesIdMutationError = ErrorType<Error>;

export const usePutCategoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCategoriesId>>,
    TError,
    { id: number; data: CategoryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCategoriesId = (id: number) => {
  return API<number>({ url: `/categories/${id}`, method: 'delete' });
};

export const getDeleteCategoriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCategoriesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCategoriesId>>
>;

export type DeleteCategoriesIdMutationError = ErrorType<Error>;

export const useDeleteCategoriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
